		<--> START NPM <-->

-- 1 -> /projectFolder -> npm init //package.json

		<--> INSTALL WEBPACK <-->
-- 2 -> /projectFolder -> npm install webpack --save-dev

		<--> MODIFY PACKAGE.JSON SCRIPT <-->
-- 3 -> modify file: /projectFolder/package.json -> "script" {"dev": "webpack"}

		<--> CREATE A TEST FILE AND EXPORT<-->
-- 4 -> create a test.js file --> /projectFolder/src/js/test.js => {
		console.log('imported module');
		export default 23;
	}

		<--> IMPORT <-->
-- 5 -> /projectFolder/src/js/test.js => {
		import num from './test';
		console.log(`I imported ${num} from another module!`);
	}

		<--> CREATE AND SETUP WEBPACK <-->
-- 6 -> Create a file webpack.config.js --> /projectFolder/webpack.config.js => {
		const path = require('path');
		module.exports = {
    			entry: './src/js/index.js',
			output: {
        		path: path.resolve(__dirname, 'dist'),
        		filename: 'js/bundle.js'
    			},
		mode: 'development'
		}
	};


		<--> INSTALL WEBPACK CLI (RUN WEBPACK IN THE SERVER <-->
-- 7 -> /projectFolder -> npm install webpack-cli --save-dev
		

		<--> RUN WEBPACK <-->
-- 8 -> npm run dev;


		<--> MODIFY PACKAGE.JSON SCRIPT <-->
-- 9 ->modify file: /projectFolder/package.json -> "script" {
	"dev": "webpack --mode development",
		"build": "webpack --mode production"
	}
		
		<--> MODIFY WEBPACK SETUP <-->
--10 --> Remove mode into webpack.config.js --> /projectFolder/webpack.config.js => {
		const path = require('path');
		module.exports = {
    			entry: './src/js/index.js',
			output: {
        		path: path.resolve(__dirname, 'dist'),
        		filename: 'js/bundle.js'
    			},
		}
	};


		<--> INSTALL WEBPACK DEV SERVER <-->
--11 --> /projectFolder -> npm install webpack-dev-server --save-dev


		<--> MODIFY WEBPACK SETUP <-->
--12 --> include devServer into webpack.config.js --> /projectFolder/webpack.config.js => {
		const path = require('path');
		module.exports = {
    			entry: './src/js/index.js',
			output: {
        		path: path.resolve(__dirname, 'dist'),
        		filename: 'js/bundle.js'
    			},
		devServer: {
		        contentBase: './dist'
    			}
		}
	};

		<--> MODIFY PACKAGE.JSON SCRIPT <-->
-- 13 -include start into package.json --> file: /projectFolder/package.json -> "script" {
	"dev":  "webpack --mode development",
		"build": "webpack --mode production",
		"start": "webpack-dev-server --mode develoment --open"

	}

		<--> RUN WEBPACK-DEV-SERVER <-->
-- 14 - run server --> "npm run server"



		<--> INSTALL WEBPACK DEV SERVER <-->
-- 15 --> /projectFolder -> npm install html-webpack-plugin--save-dev

		<--> MODIFY WEBPACK SETUP <-->
-- 16 --> include htmlWebpackPlugin and the Plogin into webpack.config.js --> /projectFolder/webpack.config.js => {
		const path = require('path');
		const HtmlWebpackPlugin = require('html-webpack-plugin')

		module.exports = {
    			entry: './src/js/index.js',
			output: {
        		path: path.resolve(__dirname, 'dist'),
        		filename: 'js/bundle.js'
    			},
		devServer: {
		        contentBase: './dist'
    			},
 		plugins: [
        		new HtmlWebpackPlugin({
            			filename: 'index.html',
            			template: './src/index.html'
       		 })
    		]
		}
	};

		<--> INSTALL WEBPACK DEV SERVER <-->
-- 17 --> /projectFolder -> npm install webpack-dev-server --save-dev


		<--> MODIFY WEBPACK SETUP <-->
-- 18 --> include babel module into webpack.config.js --> /projectFolder/webpack.config.js => {
		const path = require('path');
		const HtmlWebpackPlugin = require('html-webpack-plugin')

		module.exports = {
    			entry: './src/js/index.js',
			output: {
        		path: path.resolve(__dirname, 'dist'),
        		filename: 'js/bundle.js'
    			},
		devServer: {
		        contentBase: './dist'
    			},
 		plugins: [
        		new HtmlWebpackPlugin({
            			filename: 'index.html',
            			template: './src/index.html'
       		 })
    		],
		module: {
      			  rules: [
        		    {
             		   	test: /\.js$/,
              		  	exclude: /node_modules/,
              		  	use: {
                  		  loader: 'babel-loader'
               		 	 }
           		    }	
        	        ]
   		    }
		}
};

		<--> CREATE A BABEL FILE <-->
-- 19 -> create a babel file and preset it --> /projectFolder/.babelrc => {
{
    "presets": [
        "env", {
            "targets": {
                "browsers": [
                    "last 5 versions",
                    "ie >= 8"
                ]
            }
        }
    ]
}	

}

		<--> INSTALL BABEL DEPENDENCIES <-->
-- 20 --> /projectFolder -> npm install @babel/core @babel/preset-env babel-loader --save-dev
			    npm install @babel/polyfill --save




-- npm init
-- npm install webpack --save-dev
-- npm install webpack-cli --save-dev
-- npm install webpack-dev-server --save-dev
-- npm install @babel/core @babel/preset-env babel-loader --save-dev
-- npm install @babel/polyfill --save